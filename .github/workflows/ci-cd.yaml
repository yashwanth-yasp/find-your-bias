name: Microservices CI/CD

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  # -------------------- VOTE SERVICE --------------------
  vote-service:
    name: Vote Service CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Lint Vote Service (Flake8)
        run: |
          pip install flake8
          flake8 vote/ || true

      - name: Run SCA on Vote Service (Trivy)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: vote
          format: table
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      - name: Run SAST on Vote Service (Bandit)
        run: |
          pip install bandit
          bandit -r vote/ -ll -f json -o bandit-results.json || true

      - name: Run Vote Service Unit Tests
        run: |
          pip install pytest
          pytest vote/tests || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Vote service image
        uses: docker/build-push-action@v5
        with:
          context: ./vote
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/vote-find-your-bias:${{ github.sha }}

  # -------------------- RESULT SERVICE --------------------
  result-service:
    name: Result Service CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Node dependencies
        run: |
          cd result
          npm install

      - name: Run ESLint check
        run: |
          npm install eslint eslint-plugin-security
          npx eslint . || true
        working-directory: result

      - name: Run SCA on Result Service (Trivy)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: result
          format: table
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      - name: Run SAST on Result Service (ESLint security)
        run: |
          cd result
          npm install eslint eslint-plugin-security
          npx eslint . || true

      - name: Run Result Service Unit Tests
        run: |
          cd result
          npm test || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Result service image
        uses: docker/build-push-action@v5
        with:
          context: ./result
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/result-find-your-bias:${{ github.sha }}

  # -------------------- WORKER SERVICE --------------------
  worker-service:
    name: Worker Service CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'

      - name: Run SCA on Worker Service (Trivy)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: worker
          format: table
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      - name: Run SAST on Worker Service
        run: dotnet build /p:RunAnalyzers=true || true

      - name: Run Worker Service Unit Tests
        run: |
          cd worker
          dotnet test || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Worker service image
        uses: docker/build-push-action@v5
        with:
          context: ./worker
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/worker-find-your-bias:${{ github.sha }}

  # -------------------- AI ANALYZER SERVICE --------------------
  ai-analyzer-service:
    name: AI Analyzer Service CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Lint AI Analyzer Service (Flake8)
        run: |
          pip install flake8
          flake8 ai-analyzer/ || true

      - name: Run SCA on AI Analyzer Service (Trivy)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: ai-analyzer
          format: table
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      - name: Run SAST on AI Analyzer Service (Bandit)
        run: |
          pip install bandit
          bandit -r ai-analyzer/ -ll -f json -o bandit-results.json || true

      - name: Run AI Analyzer Service Unit Tests
        run: |
          pip install pytest
          pytest ai-analyzer/tests || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push AI Analyzer service image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-analyzer
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ai-analyzer-find-your-bias:${{ github.sha }}

  # -------------------- DEPLOYMENT --------------------
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs:
      - vote-service
      - result-service
      - worker-service
      - ai-analyzer-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 --decode > $HOME/.kube/config

      - name: Create/Update AWS Credentials Secret in K8s
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          kubectl delete secret aws-credentials --ignore-not-found
          kubectl create secret generic aws-credentials \
            --from-literal=AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            --from-literal=AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY

      - name: Deploy all microservices
        run: |
          echo "➡️ Updating Vote Service"
          kubectl set image deployment/vote vote=${{ secrets.DOCKER_HUB_USERNAME }}/vote-find-your-bias:${{ github.sha }}
          kubectl rollout status deployment/vote

          echo "➡️ Updating Result Service"
          kubectl set image deployment/result result=${{ secrets.DOCKER_HUB_USERNAME }}/result-find-your-bias:${{ github.sha }}
          kubectl rollout status deployment/result

          echo "➡️ Updating Worker Service"
          kubectl set image deployment/worker worker=${{ secrets.DOCKER_HUB_USERNAME }}/worker-find-your-bias:${{ github.sha }}
          kubectl rollout status deployment/worker

          echo "➡️ Updating AI Analyzer Service"
          kubectl set image deployment/ai-analyzer ai-analyzer=${{ secrets.DOCKER_HUB_USERNAME }}/ai-analyzer-find-your-bias:${{ github.sha }}
          kubectl rollout status deployment/ai-analyzer

      - name: Run OWASP ZAP DAST Scan
        run: |
          echo "Starting OWASP ZAP scan against vote service..."
          kubectl run zap-scan \
            --image=owasp/zap2docker-stable \
            --restart=Never \
            --command -- \
            zap-baseline.py \
            -t http://vote:80 \
            -r /tmp/zap_report.html \
            -m 5

          echo "Waiting for ZAP scan to complete..."
          timeout=300
          while [[ $(kubectl get pod zap-scan -o 'jsonpath={.status.phase}') != "Succeeded" && $timeout -gt 0 ]]; do
            phase=$(kubectl get pod zap-scan -o 'jsonpath={.status.phase}')
            if [[ $phase == "Failed" ]]; then
              echo "ZAP scan pod failed!"
              kubectl logs zap-scan
              kubectl delete pod zap-scan
              exit 1
            fi
            sleep 10
            timeout=$((timeout-10))
          done

          if [[ $timeout -le 0 ]]; then
            echo "ZAP scan timed out."
            kubectl logs zap-scan
            kubectl delete pod zap-scan
            exit 1
          fi

          echo "ZAP scan completed. Copying report..."
          kubectl cp zap-scan:/tmp/zap_report.html ./zap_report.html

          echo "Cleaning up ZAP scan pod..."
          kubectl delete pod zap-scan

      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: zap_report.html
