name: Microservices CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  # -------------------- VOTE SERVICE --------------------
  vote-service:
    name: Vote Service CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Lint
      - name: Lint Vote Service (Flake8)
        run: |
          pip install flake8
          flake8 vote/ || true

      SCA
      - name: Run SCA on Vote Service (Trivy)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: vote
          format: table
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      SAST
      - name: Run SAST on Vote Service (Bandit)
        run: |
          pip install bandit
          bandit -r vote/ -ll -f json -o bandit-results.json || true

      Unit tests
      - name: Run Vote Service Unit Tests
        run: |
          pip install pytest
          pytest vote/tests || true

      # Docker build & push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Vote service image
        uses: docker/build-push-action@v5
        with:
          context: ./vote
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/vote-find-your-bias:${{ github.sha }}

  # -------------------- RESULT SERVICE --------------------
  result-service:
    name: Result Service CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      Lint
      - name: Install Node dependencies
        run: |
          cd result
          npm install

      - name: Run ESLint check
        run: |
          npm install eslint eslint-plugin-security
          npx eslint . || true
        working-directory: result

      SCA
      - name: Run SCA on Result Service (Trivy)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: result
          format: table
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      SAST
      - name: Run SAST on Result Service (ESLint security)
        run: |
          cd result
          npm install eslint eslint-plugin-security
          npx eslint . || true

      Unit tests
      - name: Run Result Service Unit Tests
        run: |
          cd result
          npm test || true

      # Docker build & push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Result service image
        uses: docker/build-push-action@v5
        with:
          context: ./result
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/result-find-your-bias:${{ github.sha }}

  # -------------------- WORKER SERVICE --------------------
  worker-service:
    name: Worker Service CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'

      # SCA
      - name: Run SCA on Worker Service (Trivy)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: worker
          format: table
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      # (Optional) Add Roslyn analyzers or SonarQube for SAST
      - name: Run SAST on Worker Service
        run: dotnet build /p:RunAnalyzers=true || true

      # Unit tests
      - name: Run Worker Service Unit Tests
        run: |
          cd worker
          dotnet test || true

      # Docker build & push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Worker service image
        uses: docker/build-push-action@v5
        with:
          context: ./worker
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/worker-find-your-bias:${{ github.sha }}

  # -------------------- AI ANALYZER SERVICE --------------------
  ai-analyzer-service:
    name: AI Analyzer Service CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      Lint
      - name: Lint AI Analyzer Service (Flake8)
        run: |
          pip install flake8
          flake8 ai-analyzer/ || true

      SCA
      - name: Run SCA on AI Analyzer Service (Trivy)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: ai-analyzer
          format: table
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      SAST
      - name: Run SAST on AI Analyzer Service (Bandit)
        run: |
          pip install bandit
          bandit -r ai-analyzer/ -ll -f json -o bandit-results.json || true

      Unit tests
      - name: Run AI Analyzer Service Unit Tests
        run: |
          pip install pytest
          pytest ai-analyzer/tests || true

      # Docker build & push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push AI Analyzer service image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-analyzer
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ai-analyzer-find-your-bias:${{ github.sha }}

