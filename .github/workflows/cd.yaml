name: Simple CD after CI with DAST

on:
  workflow_run:
    workflows: ["Microservices CI"]
    types:
      - completed

jobs:
  deploy:
    # Only run if the CI workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Create/Update AWS Credentials Secret
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          kubectl delete secret aws-credentials --ignore-not-found
          kubectl create secret generic aws-credentials \
            --from-literal=AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            --from-literal=AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/vote vote=${{ secrets.DOCKER_HUB_USERNAME }}/vote-find-your-bias:${{ github.event.workflow_run.head_sha }}
          kubectl set image deployment/result result=${{ secrets.DOCKER_HUB_USERNAME }}/result-find-your-bias:${{ github.event.workflow_run.head_sha }}
          kubectl set image deployment/worker worker=${{ secrets.DOCKER_HUB_USERNAME }}/worker-find-your-bias:${{ github.event.workflow_run.head_sha }}
          kubectl set image deployment/ai-analyzer ai-analyzer=${{ secrets.DOCKER_HUB_USERNAME }}/ai-analyzer-find-your-bias:${{ github.event.workflow_run.head_sha }}

          kubectl rollout status deployment/vote
          kubectl rollout status deployment/result
          kubectl rollout status deployment/worker
          kubectl rollout status deployment/ai-analyzer

      # --- In-Cluster DAST Stage ---
      - name: Run OWASP ZAP inside Kubernetes
        run: |
          echo "Starting OWASP ZAP scan against vote service..."
          
          # Create a temp ZAP scan pod
          kubectl run zap-scan \
            --image=owasp/zap2docker-stable \
            --restart=Never \
            --command -- \
            zap-baseline.py \
            -t http://vote:80 \
            -r /tmp/zap_report.html \
            -m 5

          # Wait for the pod to complete
          echo "Waiting for ZAP scan to complete..."
          timeout=300
          while [[ $(kubectl get pod zap-scan -o 'jsonpath={.status.phase}') != "Succeeded" && $timeout -gt 0 ]]; do
            phase=$(kubectl get pod zap-scan -o 'jsonpath={.status.phase}')
            if [[ $phase == "Failed" ]]; then
              echo "ZAP scan pod failed!"
              kubectl logs zap-scan
              kubectl delete pod zap-scan
              exit 1
            fi
            sleep 10
            timeout=$((timeout-10))
          done

          if [[ $timeout -le 0 ]]; then
            echo "ZAP scan timed out."
            kubectl logs zap-scan
            kubectl delete pod zap-scan
            exit 1
          fi

          echo "ZAP scan completed. Copying report..."
          # Copy the report from pod to local
          kubectl cp zap-scan:/tmp/zap_report.html ./zap_report.html

          # Cleanup the pod
          echo "Cleaning up ZAP scan pod..."
          kubectl delete pod zap-scan

      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: zap_report.html

